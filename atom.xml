<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cheng102e的博客</title>
  
  <subtitle>缘何不懂，坚持不懈磨砺精炼</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cheng102e.github.io/"/>
  <updated>2020-03-05T14:10:56.851Z</updated>
  <id>https://cheng102e.github.io/</id>
  
  <author>
    <name>cheng102e</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>剑指offer 56.删除链表中重复的结点</title>
    <link href="https://cheng102e.github.io/%E5%89%91%E6%8C%87offer%2056.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E7%BB%93%E7%82%B9.html"/>
    <id>https://cheng102e.github.io/剑指offer 56.删除链表中重复的结点.html</id>
    <published>2020-03-05T13:50:00.000Z</published>
    <updated>2020-03-05T14:10:56.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-56-删除链表中重复的结点"><a href="#剑指offer-56-删除链表中重复的结点" class="headerlink" title="剑指offer 56.删除链表中重复的结点"></a>剑指offer 56.删除链表中重复的结点</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5 处理后为 1-&gt;2-&gt;5</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>直接找就行了,记得先新建一个结点用于避免头结点也和别的相同值，如果下一个结点和当前节点相等，那么再到下一个结点直到不一样未知，然后直接把连起来就行。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class ListNode &#123;</span><br><span class="line"></span><br><span class="line">  int val;</span><br><span class="line">  ListNode next = null;</span><br><span class="line"></span><br><span class="line">  ListNode(int val) &#123;</span><br><span class="line">    this.val = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public ListNode deleteDuplication(ListNode pHead) &#123;</span><br><span class="line">  if (pHead == null) &#123;</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ListNode newhead = new ListNode(1);</span><br><span class="line">  newhead.next = pHead;</span><br><span class="line">  ListNode cur = pHead;</span><br><span class="line">  ListNode pre = newhead;</span><br><span class="line">  while (cur != null) &#123;</span><br><span class="line">    if (cur.next != null &amp;&amp; cur.val == cur.next.val) &#123;</span><br><span class="line">      while (cur.next != null &amp;&amp; cur.val == cur.next.val) &#123;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">      &#125;</span><br><span class="line">      pre.next = cur.next;</span><br><span class="line">      cur = cur.next;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      pre = pre.next;</span><br><span class="line">      cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return newhead.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-56-删除链表中重复的结点&quot;&gt;&lt;a href=&quot;#剑指offer-56-删除链表中重复的结点&quot; class=&quot;headerlink&quot; title=&quot;剑指offer 56.删除链表中重复的结点&quot;&gt;&lt;/a&gt;剑指offer 56.删除链表中重复的结点&lt;/
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://cheng102e.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指offer 55.链表中环的入口结点</title>
    <link href="https://cheng102e.github.io/%E5%89%91%E6%8C%87offer%2055.%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E7%BB%93%E7%82%B9.html"/>
    <id>https://cheng102e.github.io/剑指offer 55.链表中环的入口结点.html</id>
    <published>2020-03-05T13:40:00.000Z</published>
    <updated>2020-03-05T13:56:31.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-55-链表中环的入口结点"><a href="#剑指offer-55-链表中环的入口结点" class="headerlink" title="剑指offer 55.链表中环的入口结点"></a>剑指offer 55.链表中环的入口结点</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>现在成了数学题了，首先设快慢两点都在开头，快结点一下走两步，慢结点一下走一步，当快结点追上慢结点就代表存在环。<br>当二者相遇，快结点回到开头，慢结点继续走，当二者再次相遇时，结点就为环的入口结点。记得要考虑到没有下一个结点的可能性。<br>数学问题我就不证明了，画一个图就能理解了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class ListNode &#123;</span><br><span class="line"></span><br><span class="line">  int val;</span><br><span class="line">  ListNode next = null;</span><br><span class="line"></span><br><span class="line">  ListNode(int val) &#123;</span><br><span class="line">    this.val = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public ListNode EntryNodeOfLoop(ListNode pHead) &#123;</span><br><span class="line">  ListNode fast = pHead;</span><br><span class="line">  ListNode slow = pHead;</span><br><span class="line">  while (fast != null &amp;&amp; fast.next != null) &#123;</span><br><span class="line">    fast = fast.next.next;</span><br><span class="line">    slow = slow.next;</span><br><span class="line">    if (fast == slow) &#123;</span><br><span class="line">      break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if (fast == null || fast.next == null) &#123;</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line">  fast = pHead;</span><br><span class="line">  while (fast != slow) &#123;</span><br><span class="line">    fast = fast.next;</span><br><span class="line">    slow = slow.next;</span><br><span class="line">  &#125;</span><br><span class="line">  return fast;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-55-链表中环的入口结点&quot;&gt;&lt;a href=&quot;#剑指offer-55-链表中环的入口结点&quot; class=&quot;headerlink&quot; title=&quot;剑指offer 55.链表中环的入口结点&quot;&gt;&lt;/a&gt;剑指offer 55.链表中环的入口结点&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://cheng102e.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指offer 54.字符流中第一个不重复的字符</title>
    <link href="https://cheng102e.github.io/%E5%89%91%E6%8C%87offer%2054.%E5%AD%97%E7%AC%A6%E6%B5%81%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%97%E7%AC%A6.html"/>
    <id>https://cheng102e.github.io/剑指offer 54.字符流中第一个不重复的字符.html</id>
    <published>2020-03-05T13:20:00.000Z</published>
    <updated>2020-03-05T13:27:31.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-54-字符流中第一个不重复的字符"><a href="#剑指offer-54-字符流中第一个不重复的字符" class="headerlink" title="剑指offer 54.字符流中第一个不重复的字符"></a>剑指offer 54.字符流中第一个不重复的字符</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>题目描述<br>  请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符”go”时，第一个只出现一次的字符是”g”。当从该字符流中读出前六个字符“google”时，第一个只出现一次的字符是”l”。</p><p>输出描述:<br>  如果当前字符流没有存在出现一次的字符，返回#字符。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我用LinkedHashMap，然后迭代器老是有问题，所以只能改成Hashmap加ArrayList，多了一个步骤。<br>首先是insert，在这里存放，通过hashmap存放字符和次数，list存放顺序，最后读取一下就行了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">ArrayList&lt;Character&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">public void Insert(char ch) &#123;</span><br><span class="line">  if (map.containsKey(ch)) &#123;</span><br><span class="line">    map.put(ch, map.get(ch) + 1);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    map.put(ch, 1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  list.add(ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public char FirstAppearingOnce() &#123;</span><br><span class="line">  char c = &apos;#&apos;;</span><br><span class="line">  for (char key : list) &#123;</span><br><span class="line">    if (map.get(key) == 1) &#123;</span><br><span class="line">      c = key;</span><br><span class="line">      break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-54-字符流中第一个不重复的字符&quot;&gt;&lt;a href=&quot;#剑指offer-54-字符流中第一个不重复的字符&quot; class=&quot;headerlink&quot; title=&quot;剑指offer 54.字符流中第一个不重复的字符&quot;&gt;&lt;/a&gt;剑指offer 54.字符流
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://cheng102e.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指offer 53.表示数值的字符串</title>
    <link href="https://cheng102e.github.io/%E5%89%91%E6%8C%87offer%2053.%E8%A1%A8%E7%A4%BA%E6%95%B0%E5%80%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2.html"/>
    <id>https://cheng102e.github.io/剑指offer 53.表示数值的字符串.html</id>
    <published>2020-03-05T13:10:00.000Z</published>
    <updated>2020-03-05T13:08:13.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-53-表示数值的字符串"><a href="#剑指offer-53-表示数值的字符串" class="headerlink" title="剑指offer 53.表示数值的字符串"></a>剑指offer 53.表示数值的字符串</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。 但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>三种思路：</p><ol><li>正则表达式，这里要注意转义符号的使用。</li><li>自动机，编译原理中的概念，已经忘了.</li><li>遍历，硬算，设几个标签量来记录符号等，然后ifelse结束.</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public boolean isNumeric(char[] str) &#123;</span><br><span class="line">  String que=String.valueOf(str);</span><br><span class="line">  return  que.matches(&quot;[\\+-]?[0-9]*(\\.[0-9]*)?([eE][\\+-]?[0-9]+)?&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-53-表示数值的字符串&quot;&gt;&lt;a href=&quot;#剑指offer-53-表示数值的字符串&quot; class=&quot;headerlink&quot; title=&quot;剑指offer 53.表示数值的字符串&quot;&gt;&lt;/a&gt;剑指offer 53.表示数值的字符串&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://cheng102e.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指offer 52.正则表达式匹配</title>
    <link href="https://cheng102e.github.io/%E5%89%91%E6%8C%87offer%2052.%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D.html"/>
    <id>https://cheng102e.github.io/剑指offer 52.正则表达式匹配.html</id>
    <published>2020-03-05T12:10:00.000Z</published>
    <updated>2020-03-05T13:06:02.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-52-正则表达式匹配"><a href="#剑指offer-52-正则表达式匹配" class="headerlink" title="剑指offer 52.正则表达式匹配"></a>剑指offer 52.正则表达式匹配</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>请实现一个函数用来匹配包括’.’和’<em>‘的正则表达式。模式中的字符’.’表示任意一个字符，而’</em>‘表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”ab<em>ac</em>a”匹配，但是与”aa.a”和”ab*a”均不匹配</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我对这题还真没什么思路，就，硬算，对于’.’的情况，不需要太过在意，只需要在用到的时候加一个判断即可。对于’*’的时候，需要多加讨论，是匹配当前0个字符就不用，还是匹配一个字符就不用，还是留下来匹配下一个字符。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public static boolean mate(char[] str, char[] pattern, int si, int pi) &#123;</span><br><span class="line"></span><br><span class="line">  if (str.length == si &amp;&amp; pattern.length == pi) &#123;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">  if (str.length != si &amp;&amp; pattern.length == pi) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  if (pi + 1 &lt; pattern.length &amp;&amp; pattern[pi + 1] == &apos;*&apos;) &#123;</span><br><span class="line">    if (si != str.length &amp;&amp; ((str[si] == pattern[pi] || pattern[pi] == &apos;.&apos;))) &#123;</span><br><span class="line">      boolean t0 = mate(str, pattern, si, pi + 2);</span><br><span class="line">      boolean t1 = mate(str, pattern, si + 1, pi + 2);</span><br><span class="line">      boolean t2 = mate(str, pattern, si + 1, pi);</span><br><span class="line">      return t0 || t1 || t2;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return mate(str, pattern, si, pi + 2);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (si != str.length) &#123;</span><br><span class="line">    if (str[si] == pattern[pi] || pattern[pi] == &apos;.&apos;) &#123;</span><br><span class="line">      return mate(str, pattern, si + 1, pi + 1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static boolean match(char[] str, char[] pattern) &#123;</span><br><span class="line">  if (str == null || pattern == null) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  int si = 0;</span><br><span class="line">  int pi = 0;</span><br><span class="line">  return mate(str, pattern, si, pi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-52-正则表达式匹配&quot;&gt;&lt;a href=&quot;#剑指offer-52-正则表达式匹配&quot; class=&quot;headerlink&quot; title=&quot;剑指offer 52.正则表达式匹配&quot;&gt;&lt;/a&gt;剑指offer 52.正则表达式匹配&lt;/h2&gt;&lt;h3 id=&quot;题
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://cheng102e.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指offer 51.构建乘积数组</title>
    <link href="https://cheng102e.github.io/%E5%89%91%E6%8C%87offer%2051.%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84.html"/>
    <id>https://cheng102e.github.io/剑指offer 51.构建乘积数组.html</id>
    <published>2020-03-05T10:10:00.000Z</published>
    <updated>2020-03-05T12:50:39.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-51-构建乘积数组"><a href="#剑指offer-51-构建乘积数组" class="headerlink" title="剑指offer 51.构建乘积数组"></a>剑指offer 51.构建乘积数组</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个数组A[0,1,…,n-1],请构建一个数组B[0,1,…,n-1],其中B中的元素B[i]=A[0]<em>A[1]</em>…<em>A[i-1]*A[i+1]</em>…*A[n-1]。不能使用除法。（注意：规定B[0] = A[1] * A[2] * … * A[n-1]，B[n-1] = A[0] * A[1] * … * A[n-2];）</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这就要从双向往中间计算，首先计算前半部分，就是第一个for循环，对于B[i]来说，这里已经乘上了前半部分，还缺A[i+1]后面的，这时候第二个循环，反向，先给A[len-1]，然后向前逼近，设置一个临时变量表示后半的A乘积。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public int[] multiply(int[] A) &#123;</span><br><span class="line">  int len = A.length;</span><br><span class="line">  int[] B = new int[len];</span><br><span class="line">  if (len != 0) &#123;</span><br><span class="line">    B[0] = 1;</span><br><span class="line">    for (int i = 1; i &lt; len; i++) &#123;</span><br><span class="line">      B[i] = B[i - 1] * A[i - 1];</span><br><span class="line">    &#125;</span><br><span class="line">    int temp = 1;</span><br><span class="line">    for (int j = len - 2; j &gt;= 0; j--) &#123;</span><br><span class="line">      temp *= A[j + 1];</span><br><span class="line">      B[j] *= temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return B;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-51-构建乘积数组&quot;&gt;&lt;a href=&quot;#剑指offer-51-构建乘积数组&quot; class=&quot;headerlink&quot; title=&quot;剑指offer 51.构建乘积数组&quot;&gt;&lt;/a&gt;剑指offer 51.构建乘积数组&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://cheng102e.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指offer 50.数组中重复的数字</title>
    <link href="https://cheng102e.github.io/%E5%89%91%E6%8C%87offer%2050.%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97.html"/>
    <id>https://cheng102e.github.io/剑指offer 50.数组中重复的数字.html</id>
    <published>2020-03-05T09:50:00.000Z</published>
    <updated>2020-03-05T12:50:40.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-50-数组中重复的数字"><a href="#剑指offer-50-数组中重复的数字" class="headerlink" title="剑指offer 50.数组中重复的数字"></a>剑指offer 50.数组中重复的数字</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>没什么特殊的，先判断特殊情况，然后遍历就行，如果数组已经有了，直接返回。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  public boolean duplicate(int numbers[], int length, int[] duplication) &#123;</span><br><span class="line">  if (numbers == null || length &lt;= 0) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  for (int i : numbers) &#123;</span><br><span class="line">    if (i &lt; 0 || i &gt; length - 1) &#123;</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  int[] ans = new int[length];</span><br><span class="line">  for (int i : numbers) &#123;</span><br><span class="line">    if (ans[i] == 0) &#123;</span><br><span class="line">      ans[i] = i;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      duplication[0] = i;</span><br><span class="line">      return true;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-50-数组中重复的数字&quot;&gt;&lt;a href=&quot;#剑指offer-50-数组中重复的数字&quot; class=&quot;headerlink&quot; title=&quot;剑指offer 50.数组中重复的数字&quot;&gt;&lt;/a&gt;剑指offer 50.数组中重复的数字&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://cheng102e.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指offer 49.把字符串转换成整数</title>
    <link href="https://cheng102e.github.io/%E5%89%91%E6%8C%87offer%2049.%E6%8A%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B4%E6%95%B0.html"/>
    <id>https://cheng102e.github.io/剑指offer 49.把字符串转换成整数.html</id>
    <published>2020-03-05T09:40:00.000Z</published>
    <updated>2020-03-05T09:42:43.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-49-把字符串转换成整数"><a href="#剑指offer-49-把字符串转换成整数" class="headerlink" title="剑指offer 49.把字符串转换成整数"></a>剑指offer 49.把字符串转换成整数</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>题目描述<br>  将一个字符串转换成一个整数，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0</p><p>输入描述:<br>  输入一个字符串,包括数字字母符号,可以为空</p><p>输出描述:<br>  如果是合法的数值表达则返回该数字，否则返回0</p><p>示例<br>  输入<br>  +2147483647<br>      1a33<br>  输出<br>  2147483647<br>      0</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>面向结果编程了，最小负数我技穷做不出来，就额外加了个判断。<br>首先是首位的符号位，若有则记录下来，别的都是*10，再加当前位数，最后输出时候注意前面的符号位。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public int StrToInt(String str) &#123;</span><br><span class="line">  if (str.equals(&quot;&quot;) || str.length() == 0) &#123;</span><br><span class="line">    return 0;</span><br><span class="line">  &#125;</span><br><span class="line">  if (str.equals(&quot;-2147483648&quot;)) &#123;</span><br><span class="line">    return -2147483648;</span><br><span class="line">  &#125;</span><br><span class="line">  char[] c = str.toCharArray();</span><br><span class="line">  boolean flag = true;</span><br><span class="line">  int sum = 0;</span><br><span class="line">  for (char i : c) &#123;</span><br><span class="line">    if (i == &apos;+&apos;) &#123;</span><br><span class="line">      continue;</span><br><span class="line">    &#125; else if (i == &apos;-&apos;) &#123;</span><br><span class="line">      flag = false;</span><br><span class="line">    &#125; else if (i &lt; 48 || i &gt; 57) &#123;</span><br><span class="line">      return 0;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      int temp = sum * 10 + i - 48;</span><br><span class="line">      if (((temp - i + 48) / 10 != sum) || temp % 10 &lt; 0) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">      &#125;</span><br><span class="line">      sum = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return flag ? sum : (-1) * sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-49-把字符串转换成整数&quot;&gt;&lt;a href=&quot;#剑指offer-49-把字符串转换成整数&quot; class=&quot;headerlink&quot; title=&quot;剑指offer 49.把字符串转换成整数&quot;&gt;&lt;/a&gt;剑指offer 49.把字符串转换成整数&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://cheng102e.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指offer 48.不用加减乘除做加法</title>
    <link href="https://cheng102e.github.io/%E5%89%91%E6%8C%87offer%2048.%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%81%9A%E5%8A%A0%E6%B3%95.html"/>
    <id>https://cheng102e.github.io/剑指offer 48.不用加减乘除做加法.html</id>
    <published>2020-03-05T08:40:00.000Z</published>
    <updated>2020-03-05T08:49:38.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-48-不用加减乘除做加法"><a href="#剑指offer-48-不用加减乘除做加法" class="headerlink" title="剑指offer 48.不用加减乘除做加法"></a>剑指offer 48.不用加减乘除做加法</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>(和上题把要用的删差不多了)<br>二进制相加操作就是异或操作，二进制进位操作就是与操作，首先temp就是相加，然后&amp;就是计算进位，左移一位，进位是有极限的，所以用num2存贮进位并且当做跳出条件，num1存放结果，等到没进位的时候，异或就是相加，直接输出。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public int Add(int num1, int num2) &#123;</span><br><span class="line">  while (num2 != 0) &#123;</span><br><span class="line">    int temp = num1 ^ num2;</span><br><span class="line">    num2 = (num1 &amp; num2) &lt;&lt; 1;</span><br><span class="line">    num1 = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  return num1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-48-不用加减乘除做加法&quot;&gt;&lt;a href=&quot;#剑指offer-48-不用加减乘除做加法&quot; class=&quot;headerlink&quot; title=&quot;剑指offer 48.不用加减乘除做加法&quot;&gt;&lt;/a&gt;剑指offer 48.不用加减乘除做加法&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://cheng102e.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指offer 47.求1+2+3+...+n</title>
    <link href="https://cheng102e.github.io/%E5%89%91%E6%8C%87offer%2047.%E6%B1%821+2+3+...+n.html"/>
    <id>https://cheng102e.github.io/剑指offer 47.求1+2+3+...+n.html</id>
    <published>2020-03-05T08:30:00.000Z</published>
    <updated>2020-03-05T08:39:23.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-47-求1-2-3-…-n"><a href="#剑指offer-47-求1-2-3-…-n" class="headerlink" title="剑指offer 47.求1+2+3+…+n"></a>剑指offer 47.求1+2+3+…+n</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这题就不谈了，懒得动弹，借助&amp;&amp;来做判断，或者用递归来实现while。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public int Sum_Solution(int n) &#123;</span><br><span class="line">  int sum = n;</span><br><span class="line">  boolean flag = (sum &gt; 0) &amp;&amp; ((sum += Sum_Solution(--n)) &gt; 0);</span><br><span class="line">  return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-47-求1-2-3-…-n&quot;&gt;&lt;a href=&quot;#剑指offer-47-求1-2-3-…-n&quot; class=&quot;headerlink&quot; title=&quot;剑指offer 47.求1+2+3+…+n&quot;&gt;&lt;/a&gt;剑指offer 47.求1+2+3+…+n&lt;/
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://cheng102e.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指offer 46.孩子们的游戏(圆圈中最后剩下的数)</title>
    <link href="https://cheng102e.github.io/%E5%89%91%E6%8C%87offer%2046.%E5%AD%A9%E5%AD%90%E4%BB%AC%E7%9A%84%E6%B8%B8%E6%88%8F(%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0).html"/>
    <id>https://cheng102e.github.io/剑指offer 46.孩子们的游戏(圆圈中最后剩下的数).html</id>
    <published>2020-03-05T08:00:00.000Z</published>
    <updated>2020-03-05T08:33:19.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-46-孩子们的游戏-圆圈中最后剩下的数"><a href="#剑指offer-46-孩子们的游戏-圆圈中最后剩下的数" class="headerlink" title="剑指offer 46.孩子们的游戏(圆圈中最后剩下的数)"></a>剑指offer 46.孩子们的游戏(圆圈中最后剩下的数)</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。HF作为牛客的资深元老,自然也准备了一些小游戏。其中,有个游戏是这样的:首先,让小朋友们围成一个大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0…m-1报数….这样下去….直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额有限哦!!^_^)。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)</p><p>如果没有小朋友，请返回-1</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>约瑟夫问题，我大一就做这个了，现在大四还在做这个，233333.<br>借助list，先把编号存储进去，然后循环减，每次去除一个index，初试应该是0+m-1，因为这个是从0开始，之后就是index+m-1了，最后输出编号即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> public int LastRemaining_Solution(int n, int m) &#123;</span><br><span class="line">  if (n == 0) &#123;</span><br><span class="line">    return -1;</span><br><span class="line">  &#125;</span><br><span class="line">  ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">  for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  int index = (m - 1) % list.size();</span><br><span class="line">  while (list.size() &gt; 1) &#123;</span><br><span class="line">    list.remove(index);</span><br><span class="line">    index = (m - 1 + index) % list.size();</span><br><span class="line">  &#125;</span><br><span class="line">  return list.get(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-46-孩子们的游戏-圆圈中最后剩下的数&quot;&gt;&lt;a href=&quot;#剑指offer-46-孩子们的游戏-圆圈中最后剩下的数&quot; class=&quot;headerlink&quot; title=&quot;剑指offer 46.孩子们的游戏(圆圈中最后剩下的数)&quot;&gt;&lt;/a&gt;剑指of
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://cheng102e.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指offer 45.扑克牌顺子</title>
    <link href="https://cheng102e.github.io/%E5%89%91%E6%8C%87offer%2045.%E6%89%91%E5%85%8B%E7%89%8C%E9%A1%BA%E5%AD%90.html"/>
    <id>https://cheng102e.github.io/剑指offer 45.扑克牌顺子.html</id>
    <published>2020-03-05T07:40:00.000Z</published>
    <updated>2020-03-05T08:02:24.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-45-扑克牌顺子"><a href="#剑指offer-45-扑克牌顺子" class="headerlink" title="剑指offer 45.扑克牌顺子"></a>剑指offer 45.扑克牌顺子</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)…他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子…..LL不高兴了,他想了想,决定大\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何， 如果牌能组成顺子就输出true，否则就输出false。为了方便起见,你可以认为大小王是0。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先看题目，一共五张牌，如果有对子肯定不行，除去王，别的最大差值最大只能为4，12345，所以当最大差值小于5且没有重复的时候，才能成为顺子，没必要统计王的数量，再加hashset去重。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public boolean isContinuous(int[] numbers) &#123;</span><br><span class="line">  if (numbers == null || numbers.length &lt; 5) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  Arrays.sort(numbers);</span><br><span class="line">  Set&lt;Integer&gt; set = new HashSet&lt;&gt;();</span><br><span class="line">  int max = 0, min = 14;</span><br><span class="line">  for (int i : numbers) &#123;</span><br><span class="line">    if (i != 0) &#123;</span><br><span class="line">      if (set.contains(i)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        max = Math.max(max, i);</span><br><span class="line">        min = Math.min(min, i);</span><br><span class="line">        set.add(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if (max - min &lt; 5) &#123;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-45-扑克牌顺子&quot;&gt;&lt;a href=&quot;#剑指offer-45-扑克牌顺子&quot; class=&quot;headerlink&quot; title=&quot;剑指offer 45.扑克牌顺子&quot;&gt;&lt;/a&gt;剑指offer 45.扑克牌顺子&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://cheng102e.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指offer 44.翻转单词顺序列</title>
    <link href="https://cheng102e.github.io/%E5%89%91%E6%8C%87offer%2044.%E7%BF%BB%E8%BD%AC%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F%E5%88%97.html"/>
    <id>https://cheng102e.github.io/剑指offer 44.翻转单词顺序列.html</id>
    <published>2020-03-05T07:10:00.000Z</published>
    <updated>2020-03-05T07:42:40.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-44-翻转单词顺序列"><a href="#剑指offer-44-翻转单词顺序列" class="headerlink" title="剑指offer 44.翻转单词顺序列"></a>剑指offer 44.翻转单词顺序列</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>牛客最近来了一个新员工Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事Cat对Fish写的内容颇感兴趣，有一天他向Fish借来翻看，但却读不懂它的意思。例如，“student. a am I”。后来才意识到，这家伙原来把句子单词的顺序翻转了，正确的句子应该是“I am a student.”。Cat对一一的翻转这些单词顺序可不在行，你能帮助他么？</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>同样是转置问题，这里需要多考虑一步，对于单词转置，这里设置index用于记录空格位置，最后在结尾还要再转置一次。<br>(话说上午我笔试就有这道题，不过用的Stringbuffer硬来,思路相同，就是空格处理的时候麻烦点)</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public void reverse(char[] c, int start, int end) &#123;</span><br><span class="line">  while (start &lt; end) &#123;</span><br><span class="line">    char temp = c[start];</span><br><span class="line">    c[start++] = c[end];</span><br><span class="line">    c[end--] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String ReverseSentence(String str) &#123;</span><br><span class="line">  int len = str.length();</span><br><span class="line"></span><br><span class="line">  char[] c = str.toCharArray();</span><br><span class="line">  reverse(c, 0, len - 1);</span><br><span class="line">  int index = -1;</span><br><span class="line">  for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    if (c[i] == &apos; &apos;) &#123;</span><br><span class="line">      reverse(c, index + 1, i - 1);</span><br><span class="line">      index = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  reverse(c, index + 1, len - 1);</span><br><span class="line"></span><br><span class="line">  return new String(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-44-翻转单词顺序列&quot;&gt;&lt;a href=&quot;#剑指offer-44-翻转单词顺序列&quot; class=&quot;headerlink&quot; title=&quot;剑指offer 44.翻转单词顺序列&quot;&gt;&lt;/a&gt;剑指offer 44.翻转单词顺序列&lt;/h2&gt;&lt;h3 id=&quot;题
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://cheng102e.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指offer 43.左旋转字符串</title>
    <link href="https://cheng102e.github.io/%E5%89%91%E6%8C%87offer%2043.%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html"/>
    <id>https://cheng102e.github.io/剑指offer 43.左旋转字符串.html</id>
    <published>2020-03-05T07:00:00.000Z</published>
    <updated>2020-03-05T07:17:01.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-43-左旋转字符串"><a href="#剑指offer-43-左旋转字符串" class="headerlink" title="剑指offer 43.左旋转字符串"></a>剑指offer 43.左旋转字符串</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这个就是转置问题了，如果是java，可以直接新建stringbuffer直接加，先加后面再加前面。<br>书上的思路就普适性多了，先转置前n个，再转置后面的，最后再全部转置，但是写起来还是遇到了一些问题的，特殊值需要处理等等。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  public void reverse(char[] c, int start, int end) &#123;</span><br><span class="line">  while (start &lt; end) &#123;</span><br><span class="line">    char temp = c[start];</span><br><span class="line">    c[start++] = c[end];</span><br><span class="line">    c[end--] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String LeftRotateString(String str, int n) &#123;</span><br><span class="line">  int len = str.length();</span><br><span class="line">  if (len &lt; n) &#123;</span><br><span class="line">    return &quot;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  char[] c = str.toCharArray();</span><br><span class="line">  reverse(c, 0, n - 1);</span><br><span class="line">  reverse(c, n, len - 1);</span><br><span class="line">  reverse(c, 0, len - 1);</span><br><span class="line">  String ans = &quot;&quot;;</span><br><span class="line">  for (char q : c) &#123;</span><br><span class="line">    ans += q;</span><br><span class="line">  &#125;</span><br><span class="line">  return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-43-左旋转字符串&quot;&gt;&lt;a href=&quot;#剑指offer-43-左旋转字符串&quot; class=&quot;headerlink&quot; title=&quot;剑指offer 43.左旋转字符串&quot;&gt;&lt;/a&gt;剑指offer 43.左旋转字符串&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://cheng102e.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指offer 42.和为S的两个数字</title>
    <link href="https://cheng102e.github.io/%E5%89%91%E6%8C%87offer%2042.%E5%92%8C%E4%B8%BAS%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97.html"/>
    <id>https://cheng102e.github.io/剑指offer 42.和为S的两个数字.html</id>
    <published>2020-03-05T04:22:00.000Z</published>
    <updated>2020-03-05T04:48:30.956Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-42-和为S的两个数字"><a href="#剑指offer-42-和为S的两个数字" class="headerlink" title="剑指offer 42.和为S的两个数字"></a>剑指offer 42.和为S的两个数字</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>题目描述</p><p>  输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。</p><p>输出描述:</p><p>  对应每个测试案例，输出两个数，小的先输出。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>同样是滑动窗口题目，设置左右两个游标，然后计算和，若和小，那么左侧游标增加，区间和大，右侧游标减小，保存结果的时候要比较一下更符合条件的数。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public ArrayList&lt;Integer&gt; FindNumbersWithSum(int[] array, int sum) &#123;</span><br><span class="line">  ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">  int l = 0;</span><br><span class="line">  int r = array.length - 1;</span><br><span class="line">  int a = 0;</span><br><span class="line">  int b = 0;</span><br><span class="line">  int mul = Integer.MAX_VALUE;</span><br><span class="line">  while (l &lt; r) &#123;</span><br><span class="line">    int num = array[l] + array[r];</span><br><span class="line">    if (num == sum) &#123;</span><br><span class="line">      int temp = array[l] * array[r];</span><br><span class="line">      if (temp &lt; mul) &#123;</span><br><span class="line">        mul = temp;</span><br><span class="line">        a = array[l];</span><br><span class="line">        b = array[r];</span><br><span class="line">      &#125;</span><br><span class="line">      r--;</span><br><span class="line">    &#125; else if (sum &gt; num) &#123;</span><br><span class="line">      l++;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      r--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if (a != 0 &amp;&amp; b != 0) &#123;</span><br><span class="line">    list.add(a);</span><br><span class="line">    list.add(b);</span><br><span class="line">  &#125;</span><br><span class="line">  return list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-42-和为S的两个数字&quot;&gt;&lt;a href=&quot;#剑指offer-42-和为S的两个数字&quot; class=&quot;headerlink&quot; title=&quot;剑指offer 42.和为S的两个数字&quot;&gt;&lt;/a&gt;剑指offer 42.和为S的两个数字&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://cheng102e.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="滑动窗口" scheme="https://cheng102e.github.io/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer 41.和为S的连续正数序列</title>
    <link href="https://cheng102e.github.io/%E5%89%91%E6%8C%87offer%2041.%E5%92%8C%E4%B8%BAS%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97.html"/>
    <id>https://cheng102e.github.io/剑指offer 41.和为S的连续正数序列.html</id>
    <published>2020-03-05T03:11:00.000Z</published>
    <updated>2020-03-05T03:31:30.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-41-和为S的连续正数序列"><a href="#剑指offer-41-和为S的连续正数序列" class="headerlink" title="剑指offer 41.和为S的连续正数序列"></a>剑指offer 41.和为S的连续正数序列</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这一看就是标准的滑动窗口题目，设置左右两个游标，然后计算区间和，若区间和小，那么右侧游标增加，区间和大，左侧游标增加，记得保存符合条件的结果。若左右游标重合，那就可以结束了，因为这个区间至少包括两个数。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public ArrayList&lt;ArrayList&lt;Integer&gt;&gt; FindContinuousSequence(int sum) &#123;</span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">    int l = 1;</span><br><span class="line">    int r = 2;</span><br><span class="line">    while (l &lt; r) &#123;</span><br><span class="line">      int num = (r - l + 1) * (l + r) / 2;</span><br><span class="line">      if (num == sum) &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; one = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = l; i &lt;= r; i++) &#123;</span><br><span class="line">          one.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(one);</span><br><span class="line">        r++;</span><br><span class="line">      &#125; else if (sum &gt; num) &#123;</span><br><span class="line">        r++;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        l++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return list;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-41-和为S的连续正数序列&quot;&gt;&lt;a href=&quot;#剑指offer-41-和为S的连续正数序列&quot; class=&quot;headerlink&quot; title=&quot;剑指offer 41.和为S的连续正数序列&quot;&gt;&lt;/a&gt;剑指offer 41.和为S的连续正数序列&lt;/
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://cheng102e.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="滑动窗口" scheme="https://cheng102e.github.io/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer 40.数组中只出现一次的数字</title>
    <link href="https://cheng102e.github.io/%E5%89%91%E6%8C%87offer%2040.%E6%95%B0%E7%BB%84%E4%B8%AD%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97.html"/>
    <id>https://cheng102e.github.io/剑指offer 40.数组中只出现一次的数字.html</id>
    <published>2020-03-04T12:47:00.000Z</published>
    <updated>2020-03-05T03:27:55.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-40-数组中只出现一次的数字"><a href="#剑指offer-40-数组中只出现一次的数字" class="headerlink" title="剑指offer 40.数组中只出现一次的数字"></a>剑指offer 40.数组中只出现一次的数字</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>如果只有一个数，当然是异或更好用，相同数字异或为0，但是有两个数字，这种方法无法快速找到，所以不如用hashset，如果存在就删除，不存在就加入，最后把两个数字取出来即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void FindNumsAppearOnce(int[] array, int num1[], int num2[]) &#123;</span><br><span class="line"></span><br><span class="line">  HashSet&lt;Integer&gt; set = new HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  for (int i : array) &#123;</span><br><span class="line">    if (set.contains(i)) &#123;</span><br><span class="line">      set.remove(i);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      set.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  int[] t = new int[2];</span><br><span class="line">  int temp = 0;</span><br><span class="line">  Iterator&lt;Integer&gt; iterator = set.iterator();</span><br><span class="line">  while (iterator.hasNext()) &#123;</span><br><span class="line">    t[temp++] = iterator.next();</span><br><span class="line">  &#125;</span><br><span class="line">  num1[0] = t[0];</span><br><span class="line">  num2[0] = t[1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-40-数组中只出现一次的数字&quot;&gt;&lt;a href=&quot;#剑指offer-40-数组中只出现一次的数字&quot; class=&quot;headerlink&quot; title=&quot;剑指offer 40.数组中只出现一次的数字&quot;&gt;&lt;/a&gt;剑指offer 40.数组中只出现一次的
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://cheng102e.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指offer 39.平衡二叉树</title>
    <link href="https://cheng102e.github.io/%E5%89%91%E6%8C%87offer%2039.%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.html"/>
    <id>https://cheng102e.github.io/剑指offer 39.平衡二叉树.html</id>
    <published>2020-03-04T12:37:00.000Z</published>
    <updated>2020-03-04T12:39:59.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-39-平衡二叉树"><a href="#剑指offer-39-平衡二叉树" class="headerlink" title="剑指offer 39.平衡二叉树"></a>剑指offer 39.平衡二叉树</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>输入一棵二叉树，判断该二叉树是否是平衡二叉树。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>继续偷懒，用前一题的代码，求深度，在返回之前比较一下左右子树深度，若差值大于1，结果置为false。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class TreeNode &#123;</span><br><span class="line"></span><br><span class="line">  int val = 0;</span><br><span class="line">  TreeNode left = null;</span><br><span class="line">  TreeNode right = null;</span><br><span class="line"></span><br><span class="line">  public TreeNode(int val) &#123;</span><br><span class="line">    this.val = val;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">boolean ans = true;</span><br><span class="line"></span><br><span class="line">public int TreeDepth(TreeNode root) &#123;</span><br><span class="line">  if (root == null) &#123;</span><br><span class="line">    return 0;</span><br><span class="line">  &#125;</span><br><span class="line">  int left = TreeDepth(root.left);</span><br><span class="line">  int right = TreeDepth(root.right);</span><br><span class="line">  if (Math.abs(left - right) &gt; 1) &#123;</span><br><span class="line">    ans = false;</span><br><span class="line">  &#125;</span><br><span class="line">  return Math.max(left, right) + 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean IsBalanced_Solution(TreeNode root) &#123;</span><br><span class="line">  int i = TreeDepth(root);</span><br><span class="line">  return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-39-平衡二叉树&quot;&gt;&lt;a href=&quot;#剑指offer-39-平衡二叉树&quot; class=&quot;headerlink&quot; title=&quot;剑指offer 39.平衡二叉树&quot;&gt;&lt;/a&gt;剑指offer 39.平衡二叉树&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://cheng102e.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指offer 38.二叉树的深度</title>
    <link href="https://cheng102e.github.io/%E5%89%91%E6%8C%87offer%2038.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6.html"/>
    <id>https://cheng102e.github.io/剑指offer 38.二叉树的深度.html</id>
    <published>2020-03-04T12:17:00.000Z</published>
    <updated>2020-03-04T12:39:54.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-38-二叉树的深度"><a href="#剑指offer-38-二叉树的深度" class="headerlink" title="剑指offer 38.二叉树的深度"></a>剑指offer 38.二叉树的深度</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>偷个懒，直接用递归，如果结点为空就不增长深度，不为空就返回子树的深度加一。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class TreeNode &#123;</span><br><span class="line"></span><br><span class="line">  int val = 0;</span><br><span class="line">  TreeNode left = null;</span><br><span class="line">  TreeNode right = null;</span><br><span class="line"></span><br><span class="line">  public TreeNode(int val) &#123;</span><br><span class="line">    this.val = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int TreeDepth(TreeNode root) &#123;</span><br><span class="line">  if (root == null) &#123;</span><br><span class="line">    return 0;</span><br><span class="line">  &#125;</span><br><span class="line">  return Math.max(TreeDepth(root.left), TreeDepth(root.right)) + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-38-二叉树的深度&quot;&gt;&lt;a href=&quot;#剑指offer-38-二叉树的深度&quot; class=&quot;headerlink&quot; title=&quot;剑指offer 38.二叉树的深度&quot;&gt;&lt;/a&gt;剑指offer 38.二叉树的深度&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://cheng102e.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指offer 37.数字在排序数组中出现的次数</title>
    <link href="https://cheng102e.github.io/%E5%89%91%E6%8C%87offer%2037.%E6%95%B0%E5%AD%97%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0.html"/>
    <id>https://cheng102e.github.io/剑指offer 37.数字在排序数组中出现的次数.html</id>
    <published>2020-03-04T11:55:00.000Z</published>
    <updated>2020-03-04T12:17:32.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑指offer-37-数字在排序数组中出现的次数"><a href="#剑指offer-37-数字在排序数组中出现的次数" class="headerlink" title="剑指offer 37.数字在排序数组中出现的次数"></a>剑指offer 37.数字在排序数组中出现的次数</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>统计一个数字在排序数组中出现的次数。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>虽然递归已经是O(n)了，但是还要缩小，所以二分查找，找到前后的位置就行了。查找设k-0.5和k+0.5，反正都没有，所以能找到应该在的位置，然后减法就行。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public int search(int[] array, double k) &#123;</span><br><span class="line">  int l = 0;</span><br><span class="line">  int r = array.length - 1;</span><br><span class="line">  int m = (r - l) / 2 + l;</span><br><span class="line">  while (l &lt;= r) &#123;</span><br><span class="line">    if (array[m] &lt; k) &#123;</span><br><span class="line">      l = m + 1;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      r = m - 1;</span><br><span class="line">    &#125;</span><br><span class="line">    m = (r - l) / 2 + l;</span><br><span class="line">  &#125;</span><br><span class="line">  return l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int GetNumberOfK(int[] array, int k) &#123;</span><br><span class="line">  int start = search(array, k - 0.5);</span><br><span class="line">  int end = search(array, k + 0.5);</span><br><span class="line">  return end - start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑指offer-37-数字在排序数组中出现的次数&quot;&gt;&lt;a href=&quot;#剑指offer-37-数字在排序数组中出现的次数&quot; class=&quot;headerlink&quot; title=&quot;剑指offer 37.数字在排序数组中出现的次数&quot;&gt;&lt;/a&gt;剑指offer 37.数字在
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://cheng102e.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
</feed>
