<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[洛谷 P1307 数字反转]]></title>
    <url>%2F2019%2F08%2F01%2F%E6%B4%9B%E8%B0%B7%20P1307%20%E6%95%B0%E5%AD%97%E5%8F%8D%E8%BD%AC%2F</url>
    <content type="text"><![CDATA[链接：https://www.luogu.org/problem/P1307题目：#### 题目描述 给定一个整数，请将该数各个位上数字反转得到一个新数。新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零（参见样例2）。 #### 输入格式 一个整数 NN #### 输出格式 一个整数，表示反转后的新数。 #### 输入输出样例 输入 #1 123 输出 #1 321 输入 #2 -380 输出 #2 -83 #### 说明/提示 数据范围 -1,000,000,000≤N≤1,000,000,000 noip2011普及组第一题 思路： 思路清晰，先判断是否为负数，记录一下，之后反复取尾数，直到结束，输出。 这题真的做过，不过上次是在LeetCode上面做的，用的java。 代码：1234567891011121314151617181920212223242526#include&lt;iostream&gt;#include&lt;cmath&gt;#include&lt;limits.h&gt;using namespace std;int main()&#123; int ans = 0; int x; cin &gt;&gt; x; int num = abs(x); int max = INT_MAX/10; while(num&gt;0) &#123; int t = num % 10; if(ans &gt; max) return 0; ans = ans * 10 + t; num = num / 10; &#125; if(x&gt;0) cout &lt;&lt; ans; else cout &lt;&lt; -ans; return 0;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[My New Post]]></title>
    <url>%2F2019%2F08%2F01%2FMy-New-Post%2F</url>
    <content type="text"><![CDATA[这是我在GitHub上的写第一篇博客，希望大家能互相学习，共同进步。 这边的博客因为才开始，所以界面功能也不怎么完善，会慢慢改进。 博客园地址：https://www.cnblogs.com/blogxjc/ 因为在那边还有不少博客，迁移过来还需要不短时间，所以大家能经常看见时间在这之前的博客。]]></content>
  </entry>
  <entry>
    <title><![CDATA[java的三种随机数生成方式]]></title>
    <url>%2F2018%2F09%2F21%2Fjava%E7%9A%84%E4%B8%89%E7%A7%8D%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[java的三种随机数生成方式随机数的产生在一些代码中很常用，也是我们必须要掌握的。而java中产生随机数的方法主要有三种： 第一种：new Random() 第二种：Math.random() 第三种：currentTimeMillis() 第一种第一种需要借助java.util.Random类来产生一个随机数发生器，也是最常用的一种，构造函数有两个，Random()和Random(long seed)。第一个就是以当前时间为默认种子，第二个是以指定的种子值进行。产生之后，借助不同的语句产生不同类型的数。 种子就是产生随机数的第一次使用值,机制是通过一个函数,将这个种子的值转化为随机数空间中的某一个点上,并且产生的随机数均匀的散布在空间中。以后产生的随机数都与前一个随机数有关。以代码为例。 123456789public static void main(String[] args)&#123; Random r = new Random(1); for(int i=0 ; i&lt;5 ; i++) &#123; int ran1 = r.nextInt(100); System.out.println(ran1); &#125;&#125; 在我的编译器下产生的五个数均为85,88,47,13,54，如果采用Random r = new Random()，产生的随机数就不同，这就是确定种子导致的结果。 第二种而第二种方法返回的数值是[0.0,1.0）的double型数值，由于double类数的精度很高，可以在一定程度下看做随机数，借助（int）来进行类型转换就可以得到整数随机数了，代码如下。 123456public static void main(String[] args)&#123; int max=100,min=1; int ran2 = (int) (Math.random()*(max-min)+min); System.out.println(ran2);&#125; 第三种至于第三种方法虽然不常用，但是也是一种思路。方法返回从1970年1月1日0时0分0秒（这与UNIX系统有关）到现在的一个long型的毫秒数，取模之后即可得到所需范围内的随机数。 12345678public static void main(String[] args)&#123; int max=100,min=1; long randomNum = System.currentTimeMillis(); int ran3 = (int) (randomNum%(max-min)+min); System.out.println(ran3); &#125;]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
